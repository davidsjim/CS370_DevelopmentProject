README
======

this package includes the following files.
Makefile
|-- Cipher.cpp --|  methods defined from Cipher.h
|-- main.cpp --|  main part to create the ciphered text and send it to specified outputfile
|-- Cipher.h --|  defines methods to be used for Cipher.cpp
|-- README.txt --|  this Text file
|--WordBank--| Example Wordbank file !!! Each String Should be seperated with a new charachter delimeter !!! 
#########################################################################################################
THE WORDBANK IS ENCRYPTED SO THE FORMAT WILL BE AS DECRIBED ABOVE HOWEVER THE ACTUAL TEXT IN IT IS NON (UTF-8) STANDART UNTIL DECRYPTED.

#########################################################################################################
|--Keyfile--|Example Keyfile !!!! IMPORTANT The key file MUST BE length 8 bytes for BLOCK CIPHER (8 chars) !!!!

the executable name is Cipher 
First use  make to create the executable Cipher
Make clean to clear the executable and .o files


there are 7 main functions ReadInput ,ReadKeyfile , WriteToFile , Blockcipher , StreamCipher , Decipherblock  , DecipherStream.
Decipherblock and Decipher Stream are used for testing purposes and Deciphering The Wordbank.

the error messages are clear however ignore the usage error about sacrificing a goat.

There are no arguments passed
After executable runs it will prompt the user with login ;
######################################################
USER ID = AKDI
USER PASSWORD = CS370
after that We have set up 2 types of encryption Block and Stream;
######################################################

BLOCK CIPHER :

Algorithm will XOR the 64 bit data block with the 64 bit key in a bitwise manner,
i.e. each bit of the key starting from the left most bit will be XORed with each bit of a 64 bit data block, starting from the left hand side.
Your algorithm will then swap bytes of the XORed output using the following algorithm.
'start' and 'end' are pointers which point to the start and end of the XORed output string.
For each byte of the key, starting from the left most byte or 0th byte, we calculate the following : (ASCII value of the byte or character)mod2. This would give you either 0 or 1.
If the value is 0 we do not swap anything and move to the next byte of the plaintext by incrementing the 'start' pointer.
Otherwise, we swap the byte pointed by the 'start' pointer with that pointed by the 'end' pointer.
Then increment the 'start' pointer so that it points to the next higher byte and decrement the 'end' pointer so that it points to the next lower byte.
If the keysize is exhausted, you restart from the first byte of the key. This process is carried on until the 'start' and the 'end' pointers collide.
The swap process stops and produces the required encrypted output.
The decryption process is also of these steps but proceeds in the reverse order as the encryption process : swap -> decrypt (using XOR) -> The decrypted output should be written to the output file.
Because, the decryption process occurs in the reverse direction of the encryption process, you cannot use the same module to perform both,
although the underlying logic will be the same.


STREAM CIPHER :

We XOR our input stream with the following data
The key is (in Hex) "0123456789ABCDEF"
Bit 0 from the input file will be XORed with Bit 0 from the key
Bit 1 from the input file will be XORed with Bit 1 from the key
...
Bit n-1 from the input file will be XORed with Bit n-1 from the key
If we reach the end of the key, start over from the beginning.
Note on the number of the bits. Since this is a stream, bit 0 is the first bit to arrive,
bit 1 is the second bit and so forth. That means the leftmost bit of the first byte is bit 0. Same with the key.
Encryption and decryption will performed with the same module that you design for the Stream Cipher.
In other words, we do not have have to design separate modules for encryption and decryption in the Stream Encryption Mode.






